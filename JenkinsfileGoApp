pipeline {
    agent any
    environment {
        WEBHOOK = credentials('WEBHOOK_URL_DISCORD')
        GOAPP_PATH = '/home/titan/jenkins/workspace/jenkins-04/go-app-pipeline'
    }
    
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'golang:1.21.4-alpine3.18'
                    label 'sandbox'
                }
            }
            steps {
                echo "Build Apps"
                sh '''
                #!/bin/bash
                go version
                # Fix `failed to initialize build cache at /.cache/go-build: mkdir /.cache: permission denied` and Compile go for Linux
                GOCACHE=/tmp/ GOOS=linux GOARCH=amd64 go build -o go-app main.go
                '''
                // Stash go-app
                stash includes: 'go-app', name: 'GOAPP_ARTIFACT'
            }
        }

        stage('Test') {
            agent {
                docker {
                    image 'golang:1.21.4-alpine3.18'
                    label 'sandbox'
                }
            }
            steps {
                echo "Test Golang Apps"
                script {
                     // Unstash go-app
                    // unstash name: 'GOAPP_ARTIFACT'

                    // Run tests
                    sh 'docker run -v $PWD:$GOAPP_PATH -w $GOAPP_PATH golang:1.21.4-alpine3.18 go test -v ./...'
                }
            }
        }

        stage('Deploy') {
            environment {
                GOAPP_SSH_KEY = credentials('goapp-rsa')
                DISCORD_NOTIF = credentials('WEBHOOK_URL_DISCORD')
                PASSWORD_HOST_SERVER = credentials('password-host-server')
            }
            steps {
                echo "Deploy Golang Apps"
                // Unstash go-app
                unstash name: 'GOAPP_ARTIFACT'
                // Stop goapp.service running in background
                // sh 'ssh -o StrictHostKeyChecking=no -i $GOAPP_SSH_KEY titan@192.168.1.118 "echo "$PASSWORD_HOST_SERVER" | sudo -S systemctl stop goapps.service"'
                sh 'ssh -o StrictHostKeyChecking=no -i $GOAPP_SSH_KEY titan@192.168.1.118 "sudo systemctl stop goapps.service"'

                // Move go app to golang server
                sh 'scp -o StrictHostKeyChecking=no -i "$GOAPP_SSH_KEY" go-app titan@192.168.1.118:~/go-app'

                // Reload the service files to include the new service
                sh 'ssh -o StrictHostKeyChecking=no -i $GOAPP_SSH_KEY titan@192.168.1.118 "sudo systemctl daemon-reload"'

                // Start goapp.service running in background
                // sh 'ssh -o StrictHostKeyChecking=no -i $GOAPP_SSH_KEY titan@192.168.1.118 "echo "$PASSWORD_HOST_SERVER" | sudo -S systemctl start goapps.service"'
                sh 'ssh -o StrictHostKeyChecking=no -i $GOAPP_SSH_KEY titan@192.168.1.118 "sudo systemctl start goapps.service"'
            }
        }
    }

    post {
        success {
            echo "Post Success"
            discordSend description: "Jenkins Pipeline Deploy", footer: "Deploy Success", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "$WEBHOOK"
        }
        failure {
            echo "Post Failure"
            discordSend description: "Jenkins Pipeline Deploy", footer: "Deploy Failure", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "$WEBHOOK"
        }
    }
}
